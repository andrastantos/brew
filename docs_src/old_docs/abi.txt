The following register usage is defined:

   $sp  - call-saved register a.k.a. $r0 - stack pointer.
   $fp  - call-saved register a.k.a. $r1 - frame pointer.
   $lr  - call-clobbered link register. - NOTE: this is actually call-saved at the moment, but I don't think that's necessary.
   $r3  - call-saved general purpose register.
   $r4  - call-clobbered first argument/return value register.
   $r5  - call-clobbered second argument/return value register.
   $r6  - call-clobbered third argument/return value register;
   $r7  - call-clobbered fourth argument/return value register;
   $r8  - call-clobbered general purpose; static chain register
   $r9  - call-clobbered general purpose; used in thunks for virtual inheritance. Must be call-clobbered
   $r10 - call-clobbered general purpose; struct value address (return value area pointer for large return values). EH_RETURN_STACKADJ_RTX BREW_STACKADJ_REG. Must be call-clobbered
   $r11 - call-saved general purpose register.
   $r12 - call-saved general purpose register.
   $r13 - call-saved general purpose register; EH_RETURN_DATA_REGNO
   $r14 - call-saved general purpose register; EH_RETURN_DATA_REGNO;

NOTE: if this changes, it needs to be followed-up in:
        - brew-newlib/newlib/libc/machine/brew/setjmp.S (setjmp/longjmp implementation)
        - brew-newlib/newlib/libc/include/machine/setjmp.h (size of jump buffer in _JBLEN)
        - brew-gcc/gcc/config/brew/brew.h (actual register use definition for GCC)
        - brew-glibc/sysdeps/brew/bits/setjmp.h

NOTE: we should review this!
      EH_RETURN_STACKADJ_RTX:
        This is a register that is used to communicate to the epilog
        of functions that might have exception handlers in them that
        they need to adjust $sp by more than the usual amount.
        It is 0-ed out for normal control-flow, and filled in with a
        potentially non-0 value for the exception path.
      EH_RETURN_DATA_REGNO[0]: 'exc_ptr_reg' for the region
      EH_RETURN_DATA_REGNO[0]: 'filter_reg' for the region
        These are used in the landing pad (the catch block) to finish
        the unwinding of the frame
      static chain register: funny name, but essentially contains the
        frame pointer for the outer functions' frame inside a nested
        function. What's going on here is that the nested function,
        independent of it's own frame needs to have access to variables
        stored in the outer functions frame. This becomes especially
        tricky when the nested function is called through a function
        pointer from outside the outer function. This is what mostly
        trampolines are for.

TODO: we should have the same number of caller and callee-saved registers.

FUNCTION ARGUMENTS
==================

Arguments (and return values) are passed, first in registers,
then on the stack. Stack area is reserved for all arguments
independent of their storage location.
Arguments can span multiple registers, but always start at
a register boundary. On the stack, they are also aligned
(and in cases where it makes sense promoted) to 32-bit boundaries.
It's also possible for an argument to be partially in registers
and partially on the stack.

NOTE: the only reason an argument is partially in registers is if
there isn't enough registers left to keep them in registers.
Similarly, an argument is placed on the stack only if we completely
ran out of argument-passing registers. Consequently, if an
argument is partially or fully on the stack, all subsequent arguments
are fully on the stack.

!!! TODO: what exactly!!! Some arguments are passed by reference
no matter what. These should be 'large' or unknown sized
arguments. In those cases, a pointer to them is put on the stack
or in registers, whichever makes sense by the previous rules.

The registers used for argument passing in increasing register
index are: $r4, $r5, $r6 and $r7.

Return values are handled the same way.

SYSCALLS
========

Syscalls follow the same calling convention, except that $r3 contains
a syscall-dependent pointer (usually pointer to errno). The SYSCALL instruction
is used to transfer control to the executive. The syscall number is stored
as a 16-bit code after the SYSCALL instruction, in the instruction-stream.
(NOTE: 16-bit so we don't have alignment problems reading it). Upon entering
scheduler mode, $TPC points to the *next* instruction, which is to say, it
points to the syscall number. The scheduler needs to increment $TPC by 2
before returning execution to task mode.

STACK
=====

Stack is pre-decrement for push, and post-increment for pop.
This means that $sp points to the last valid value.
NOTE: since the stack is SW managed, pushes and pops are not
      atomic. Interrupt handlers can't assume that $sp actually
      points to the top of the stack.

Stack frame layout upon enter to function:
  <arg 0>
  <arg 1>
  ...
  <arg n> <-- $sp
upon enter, $fp is saved on the stack, then $fp <- $sp, and finally locals are allocated. So after all of that, we have this:
  <arg 0>
  <arg 1>
  ...
  <arg n> <-- $fp
  <old $fp>
  <local 0>
  <local 1>
  ...
  <local n> <-- $sp

Function prolog/epilog is responsible for saving any registers (including $r3) that need to be preserved across calls or for returns.

Function epilog restores return address in $r3, $sp and finally returns by executing $pc <- $r3.

Exception handling returns are in $r4...$r7 (described in EH_RETURN_DATA_REGNO)

TRAMPOLINE
==========

Trampolines are used to call nested functions through a function pointer. Most of the machinery for that
is handled by GCC, but there's a little piece of code that's needed:

The static chain is maintained in $r14 (STATIC_CHAIN_REGNUM).

The trampoline is a little piece of code that's copied into a memory buffer then modified.
The template for it is the following:

    $r14 <- mem[.Lstatic_chain]
    $pc <- mem[.Lfunc_address]
  .Lstatic_chain:
    .long 0
  .Lfunc_address:
    .long 0

This template is first copied to a memory buffer, .Lstatic_chain and .Lfunc_address are then filled
in with the correct value and finally a jump is generated to the beginning of the buffer.

Now, for this functionality to work, we'll need to flush the icache (once we have such a thing) and
the dcache (if it's write-back) to ensure proper execution. We have self-modifying code here...


MEMORY LAYOUT
=============
Page 0 is reserved (to catch NULL-ptr dereference)
Entry point is at 0x1000
Stack starts at 0x40000000
  This is set in interp.c in sim_open as the highest addressable memory address
  This is also defined in the linker scripts through the .stack section, which
  is ultimately set in ld/emulparams/elf32brew.sh.
Heap starts at the end of 'static data'.







We'll need to make sure we use sign-extend loads appropriately: apparently Moxie didn't have sign-extend loads

TODO: brew.opt needs to be updated to actually generate mfloat and mno-float options.

TODO: add floating point instructions (probably for something like fastmath only)

TODO: figure out if we really need 'upper' version of multiplies and how to efficiently use them. Right now 64-bit multiplies are borken, I think.



TODO: we probably want to control register allocation order:

/* The order in which registers should be allocated.
   It is better to use the registers the caller need not save.
   Allocate r0 through r3 in reverse order since r3 is least likely
   to contain a function parameter; in addition results are returned
   in r0.  It is quite good to use lr since other calls may clobber
   it anyway.  */
#define REG_ALLOC_ORDER						\

TODO: we should also use this:

CALL_REALLY_USED_REGISTERS instead of CALL_USED_REGISTERS -> that's legacy.

TODO: there's a GCC macro: __REGISTER_PREFIX__. If there's a GAS equivalent, maybe we can coerce GAS expression parser to stop at register names?

TODO: we need a predefined macro for -msoft-float

EXCEPTIONS
==========

The documentation is wrong in several key points. First:

We HAVE TO MAKE SURE that if a function calls __builtin_eh_return, it saves and restores on the stack
both the return address (the link register for us) and the registers in EH_RETURN_DATA_REGNO.

The Dwarf-based exception handling works by patching in the values for these registers in the stack
frame, then going through the epilog.

Second: the documentation says that architectures have to provide at least two EH_RETURN_DATA_REGNO registers,
but can provide more. While that's techincally correct, there's no reason to provide more than two.
Especially combined with the first point, it just makes for more pushes and pops from the stack.

Third: the documentation says that it's best if the EH_RETURN_DATA_REGNO registers are call-clobbered.
That, I don't think is correct, in fact, the reverse is better: it's best if these registers are caller-saved.
The reason for that is point 1: since they need to be saved and restored in functions calling __builtin_eh_return,
we have the best chances of having them already in the frame, if they are caller-saved. In fact, it's probably
best if we reserved the first two caller-saved registers for this purpose.

Many architectures use (a subset of) the argument/return value registers for EH_RETURN_DATA_REGNO. This is WRONG
in most cases, though probably doesn't actually cause problems: the generated stack-frame will potentially destroy
the original return value on non-exception paths. The reson it is mostly a benign problem is that functions
that call __builtin_eh_return (at least in the runtime) tend to return a single integer. So, as long as it's not
the first return value register that we use as EH_RETURN_DATA_REGNO, we're good.

In epilog generation we need to know if we have to save the afforementioned registers. We can consult

    crtl->calls_eh_return

to determine that.

With that, right now I'm using $r13 and $r14 for EH_RETURN_DATA_REGNO, but later I should probably use lower-ordered ones,
or change the allocation priority to go from top down. This doesn't seem to be documented, but there's a simple way of
ensuring this:

        /* We need this on CRIS, because call-used regs should be used first,
        (so we don't need to push).  Else start using registers from r0 and up.
            This preference is mainly because if we put call-used-regs from r0
        and up, then we can't use movem to push the rest, (which have to be
        saved if we use them, and movem has to start with r0).
        Change here if you change which registers to use as call registers.

        The actual need to explicitly prefer call-used registers improved the
        situation a lot for 2.1, but might not actually be needed anymore.
        Still, this order reflects what GCC should find out by itself, so it
        probably does not hurt.

        Order of preference: Call-used-regs first, then r0 and up, last fp &
        sp & pc as fillers.
        Call-used regs in opposite order, so they will cause less conflict if
        a function has few args (<= 3) and it wants a scratch reg.
            Use struct-return address first, since very few functions use
        structure return values so it is likely to be available.  */
        #define REG_ALLOC_ORDER \
            {9, 13, 12, 11, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 17, 16, 18, 19, 20}


