HOW TO BUILD THE TOOLSET?
=========================

Prerequisites:

  dejagnu
  autogen
  libmpc-dev
  libmpfr-dev
  libisl-dev

TARGET=brew-linux-newlib
or
TARGET=brew-none-elf
PREFIX=~/brew-toolset
export PATH=$PATH:$PREFIX/bin
# for cygwin:
export BREW_BLD_EXTRA="--build=x86_64-w64-cygwin --host=x86_64-w64-cygwin"
# for mingw:
export BREW_BLD_EXTRA="--build=x86_64-w64-mingw32 --host=x86_64-w64-mingw32"

1. binutils:
  mkdir brew-binutils-build
  cd brew-binutils-build
  ../brew-binutils-gdb/configure --target=$TARGET --prefix=$PREFIX --no-recursion --enable-sim-profile=yes $BREW_BLD_EXTRA
  make
  make install
2. gcc phase 1:
  mkdir brew-gcc-build1
  cd brew-gcc-build1
  ../brew-gcc/configure --target=$TARGET --prefix=$PREFIX --enable-languages=c --without-headers --with-newlib --disable-shared --disable-libssp --disable-threads --disable-libgomp --disable-libatomic $BREW_BLD_EXTRA
  make
  make install
3. newlib
  mkdir brew-newlib-build
  cd brew-newlib-build
  ../brew-newlib/configure --target=$TARGET --prefix=$PREFIX
  for linux: ../brew-newlib/configure --target=$TARGET --prefix=$PREFIX --enable-newlib-multithread
  make
  make install
4. gcc phase 2:
  mkdir brew-gcc-build
  cd brew-gcc-build
  ../brew-gcc/configure --target=$TARGET --prefix=$PREFIX --enable-languages="c,c++" --without-headers --with-newlib --disable-shared --disable-libssp --disable-threads --disable-libgomp --disable-libatomic  $BREW_BLD_EXTRA
  make
  make install

Once newlib build is done, gcc phase 1 build is no longer necessary: since the newlib headers are in place, the phase 2 GCC build should succeed, even for a clean build.

To run the gcc tests:

    make check RUNTESTFLAGS="--target_board=brew-sim"

To run a single test, add the folowing to RUNTESTFLAGS:
    --tool <gcc or g++> <exp file name>=<test name>
  for instance:
    --tool gcc dg.exp=20000108-1.c

But for that we need to copy brew-sim.exp to /usr/share/dejagnu/baseboards

HOW TO FORK REPOS?
==================

If a repo is not on github:

git clone <original>
git remote rename origin upstream
git remote add origin <github fork>
git push origin --all



HOW TO CROSS COMPILE?
=====================

HOST=brew-none-elf
PREFIX=$PWD/result
PATH=$PATH:$PREFIX/bin
mkdir build
mkdir result
cd build
../<package>/configure --host=$HOST --prefix=$PREFIX



NEWLIB
-------
The host is: x86_64-pc-linux-gnu, but that doesn't build at all. Neither does i386-pc-linux-gnu
So, in general, the linux targets are busted, I think. And I'm not in the mood of fixing them.

There are two other libc alternatives to try: musl and uclibc. Which one should I try?

That should depend on which targets I want to compare against.

The support matrix (for -none-elf or similar):

  ARCH                      MUSL           UCLIBC       NEWLIB    SIM      done?
=================================================================================
 nios2-none-elf              no             yes          yes       no      yes
 microblaze-none-elf         no             yes          yes       yes     yes
 riscv-none-elf              64-bit         64-bit       yes       yes     yes
 arm-none-eabi               yes            yes          yes       yes     yes
 i386-elf-gnu                yes            yes          yes?      no

So, it seems, I'm still better off with newlib. Another approach would
be to try and find the right benchmarks to use.
